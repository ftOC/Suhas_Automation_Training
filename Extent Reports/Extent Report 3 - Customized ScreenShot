package ExtentReports;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

import util.DriverUtil;

public class ExtentReport1 {
   WebDriver driver;
   ExtentSparkReporter sparkReporter;
   ExtentReports reports;
   ExtentTest testLog;
   
   @BeforeTest
   public void beforeTest()
   {
	   
	   driver = DriverUtil.getBroswerInstance("chrome");
	   
	   SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy-hh-mm"); //to store reports in file ordered by date and time
	   
	   String filepath = System.getProperty("user.dir")+"/extent-reports/"+sdf.format(new Date())+".html";
	   sparkReporter = new ExtentSparkReporter(filepath);
	   
	   reports = new ExtentReports();
	   reports.attachReporter(sparkReporter);
	   
	   //Report customization
	   
	   sparkReporter.config().setDocumentTitle("Suhas Report");  //report tab name will be changed
	   sparkReporter.config().setTheme(Theme.DARK); // report tab theme will be changed to dark
   }

  @Test(priority=1)
  public void testMeApp()  //pass scenario
  {
	  testLog = reports.createTest("testMeApp");
	  driver.get("https://lkmdemoaut.accenture.com/TestMeApp/fetchcat.htm");
	  driver.manage().window().maximize();
	  Assert.assertEquals(driver.getTitle(), "Home");	     
  }
  @Test(priority=2)   //fail scenario
  public void testGoogleHomePage()
  {
	  testLog = reports.createTest("Google Home Page");
	  driver.get("https://www.google.com");
	  Assert.assertEquals(driver.getTitle(), "Chrome");
  }
 
  @AfterMethod
  public void afterMethod(ITestResult result) {
	  if(result.getStatus()==ITestResult.SUCCESS)
	  {
		  testLog.log(Status.PASS,"This is in "+result.getMethod().getMethodName());
	  }
	  else if(result.getStatus()==ITestResult.FAILURE)
	  {
		  testLog.log(Status.FAIL,"This is in "+result.getMethod().getMethodName());
		  TakesScreenshot screenshot = (TakesScreenshot) driver;
		  File srcFile = screenshot.getScreenshotAs(OutputType.FILE);
		  String destFile = System.getProperty("user.dir")+"/extent-reports/captures/"+result.getMethod().getMethodName()+".png"; 
		  try 
		  {
			FileUtils.copyFile(srcFile, new File(destFile));
			testLog.addScreenCaptureFromPath(destFile);
			testLog.log(Status.FAIL, MarkupHelper.createLabel("This is a failed method", ExtentColor.RED));
			testLog.log(Status.FAIL, result.getThrowable().getMessage());
		  } 
		  catch (IOException e)
		  {
			e.printStackTrace();
		  }
	  }
	  else if(result.getStatus()==ITestResult.SKIP)
	  {
		  testLog.log(Status.SKIP,"This is in "+result.getMethod().getMethodName());
	  }
  }
 @AfterTest
 public void afterTest()
 {
	 driver.close();
	 reports.flush();
 }
 
}
